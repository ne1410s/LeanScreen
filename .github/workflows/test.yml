name: test
on:
  pull_request:
    paths:
    - source/**
  workflow_call:
jobs:
  run_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./source
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add local packages source
      env:
        READ_REPO_PACKAGES: ${{ secrets.READ_REPO_PACKAGES }}
      run: dotnet nuget add source --name ne1410s --username ne1410s --password "${{ env.READ_REPO_PACKAGES }}" --store-password-in-clear-text "https://nuget.pkg.github.com/ne1410s/index.json"
    - name: Restore tools
      run: dotnet tool restore
    - name: Install test prerequisites (linux)
      run: |
        sudo apt update
        sudo apt install -y ffmpeg
    - name: Build for release
      run: dotnet build -c Release
    - name: Generate raw coverage data
      run: dotnet test -c Release -s .runsettings; dotnet reportgenerator -targetdir:coveragereport -reports:**/coverage.cobertura.xml -reporttypes:"html;jsonsummary"
    - name: Get coverage json
      id: getjson
      run: |
        json=$(<coveragereport/Summary.json)
        echo "-------------------------------"
        echo "$json"
        echo "-------------------------------"
        echo "::set-output name=json::$json"

    - name: TESTTESTTEST1
      run: echo "${{ steps.getjson.outputs.json }}"
    - name: TESTTESTTEST2
      run: echo "${{ fromJson(steps.getjson.outputs.json)['summary'] }}"
    - name: TESTTESTTEST3
      run: echo "${{ fromJson(steps.getjson.outputs.json).summary }}"


    - name: Check coverage values
      id: check_coverage
      if: fromJson(steps.getjson.outputs.json).summary.linecoverage != 100 || fromJson(steps.getjson.outputs.json).summary.branchcoverage != 100 || fromJson(steps.getjson.outputs.json).summary.methodcoverage != 100
      run: exit 1
    - name: Process coverage report
      if: success() || steps.check_coverage.outcome == 'failure'
      run: |
        dotnet reportgenerator -targetdir:'${{ github.workspace }}/drop/reports' -reports:**/coverage.cobertura.xml -reporttypes:"htmlsummary"
        rm -f ${{ github.workspace }}/drop/reports/summary.htm
        mv ${{ github.workspace }}/drop/reports/summary.html ${{ github.workspace }}/drop/reports/coverage-report.html
    - name: Generate raw mutation data
      id: gen_mutation
      if: success() || steps.check_coverage.outcome == 'failure'
      run: |
        shopt -s extglob globstar
        status=0
        for testproj in *.+(Test*(s)|UnitTest*(s)); do dotnet stryker -tp "$testproj" &>/dev/null; status=$(($status + $?)); done; exit $status
    - name: Process mutation report
      if: success() || steps.check_coverage.outcome == 'failure' || steps.gen_mutation.outcome == 'failure'
      run: |
        strykerFile=$(find ./StrykerOutput -name mutation-report.html)
        cp $strykerFile ${{ github.workspace }}/drop/reports
    - name: Drop artifact - reports
      if: success() || steps.check_coverage.outcome == 'failure' || steps.gen_mutation.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: reports
        path: ${{ github.workspace }}/drop/reports
    - name: Fail build warnings
      run: dotnet build -c Release --no-incremental /warnaserror

